#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import json
from getpass import getpass, getuser
from os import getenv, urandom
from os.path import expanduser, isfile, join
import string
import subprocess
from sys import argv, exit, platform
import time

try:
    input = raw_input  # Py3
except:
    input = input     # Py2

class Safe():

    def __init__(self, utils):
        self.utils = utils
        self.safe = self.get_safe_path()
        self.password = getpass('Enter password\n> ')

    def write_safe(self, json_data):
        ''' Writes the given data to an encrypted file using gpg '''
        with open('/dev/null', 'w') as null:
            # Send the data to encrypt into a pipe
            cmd1 = 'echo %s' % json.dumps(json_data)
            ps = subprocess.Popen(cmd1.split(), stdout=subprocess.PIPE)

            # Then encrypt the data from stdin
            cmd2 = 'gpg --symmetric --armor --batch --yes --passphrase %s --output %s' % (
                self.password, self.safe)
            ps2 = subprocess.check_output(
                cmd2.split(), stdin=ps.stdout, stderr=null)

    def read_safe(self):
        ''' Decrypts the safe and returns the parsed JSON '''
        if not isfile(self.safe):
            if not self.utils.get_answer('No safe found at %s, create one' % self.safe):
                self.utils.die('You must create a safe', 100)
            else:
                print(self.initialize_safe())

        with open('/dev/null', 'w') as null:
            cmd = 'gpg --decrypt --batch --armor --passphrase %s %s' % (
                self.password, self.safe)
            p1 = subprocess.Popen(
                cmd.split(), stdout=subprocess.PIPE, stderr=null)
            secrets, err = p1.communicate()

            if err:
                self.utils.die(err, 102)

        try:
            return json.loads(secrets)
        except ValueError:
            self.utils.die('Unable to read safe at %s' % self.safe, 101)

    def read_credential(self, alias):
        ''' Reads a credential by alias '''
        safe = self.read_safe()

        if alias not in safe['data']:
            self.utils.die('Credential not found')

        return safe['data'][alias]

    def write_credential(self, alias=None, username=None, password=None):
        ''' Writes a credential by alias '''
        safe = self.read_safe()

        # 1. Make sure there's an alias
        if not alias:
            alias = self.utils.get_input('Enter an Alias')

        # 1a. Confirm before overwriting an existing credential
        alias_exists = alias in safe['data']
        if (
            alias_exists and
            not self.utils.get_answer(
                '%s already exists, do you want to overwrite' % alias)
        ):
                self.utils.die()

        # 2. Make sure there's a username
        if not username:
            username = self.utils.get_input(
                'Enter the account username (username/email/etc)')

        # 3. Make sure there's a password
        if not password:
            if self.utils.get_answer('Generate password'):
                password = self.utils.generate_password()
            else:
                password = getpass('Enter the password\n> ')

        now = int(time.time())

        # 4. Create the credential
        if alias_exists:
            safe['data'][alias]['username'] = username
            safe['data'][alias]['password'] = password
            safe['data'][alias]['modified_on'] = now
        else:
            safe['data'][alias] = {
                'alias': alias,
                'username': username,
                'password': password,
                'created_on': now,
                'modified_on': now
            }

        # 5. Save it
        self.write_safe(safe)
        return 'Credential saved'

    def delete_credential(self, alias):
        """ Deletes a credential from the safe """
        safe = self.read_safe()

        if not alias in safe['data']:
            self.utils.die('Alias not found')

        del safe['data'][alias]
        self.write_safe(safe)
        return 'Credential removed'

    def initialize_safe(self):
        ''' Creates a new safe with default values '''
        self.write_safe({
            'created_on': int(time.time()),
            'created_by': getuser(),
            'data': {}
        })

        return 'Safe created'

    def get_safe_path(self):
        ''' Loads the safe path from the environment or uses the default location '''
        default_safe_file = join(expanduser('~'), '.pick.safe')
        return getenv('PICK_SAFE', default_safe_file)


class Util():

    def generate_password(self, length=50):
        ''' Generates a random password of length '''
        # Use no more than 256 chars in this string, rest will not be used
        chars = string.digits + string.punctuation + string.letters
        num_chars = len(chars)

        def next_index():
            return ord(urandom(1)) % num_chars

        return ''.join(chars[next_index()] for _ in range(length))

    def pretty_print(self, json_data):
        ''' Pretty prints JSON '''
        print(json.dumps(json_data, sort_keys=True, indent=4, separators=(',', ': ')))

    def get_platform(self):
        ''' Get the plaform we're running on '''
        if platform in ['linux', 'linux2']:
            return 'linux'
        elif platform == "darwin":
            return 'osx'
        else:
            self.die('Unsupported platform %s' % platform)

    def copy_to_clipboard(self, text):
        ''' Copy the given text to the clipboard '''
        if self.get_platform() == 'linux':
            process = subprocess.Popen(
                ['xclip', '-sel', 'clip'], stdin=subprocess.PIPE)
        else:
            # Assumes OS X
            process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)

        process.communicate(text.encode('utf-8'))

    def die(self, message=None, code=0):
        ''' Exit the program with a message and code '''
        if message:
            print(message)
        exit(code)

    def get_input(self, prompt):
        ''' Get user input with some default formatting '''
        return input('%s\n> ' % prompt)

    def get_answer(self, prompt, default='y'):
        ''' Gets a y/n answer for the prompt '''
        answer = input('%s? (y/n)\n> ' % prompt)
        if not answer:
            answer = default

        return answer.lower().strip() == 'y'


class Cli():

    def __init__(self, usage, version):
        self.usage = usage
        self.version = version

    def parse_args(self):
        ''' Parses the command line arguments '''
        if len(argv) <= 1:
            print(self.usage)
            exit()

        self.prog = argv[0].strip()
        self.cmd = argv[1].strip()

        if self.cmd == '-h' or self.cmd == '--help':
            print(self.usage)
            exit()

        if self.cmd == '--version':
            print(self.version)
            exit()

        self.cmd_args = argv[2:]

        if '-h' in self.cmd_args or '--help' in self.cmd_args:
            print(self.command_help(self.cmd))
            exit()

    def command_help(self, cmd):
        ''' Returns a help string for a command '''
        if cmd == 'add':
            return 'Usage: %s add [ALIAS] [USERNAME] [PASSWORD]' % self.prog
        elif cmd == 'cat':
            return 'Usage: %s cat ALIAS' % self.prog
        elif cmd == 'cp':
            return 'Usage: %s cp ALIAS' % self.prog
        elif cmd == 'ls':
            return 'Usage: %s ls' % self.prog
        elif cmd == 'rm':
            return 'Usage: %s rm ALIAS' % self.prog
        else:
            return None

    def do_add(self):
        ''' Executes the add command '''
        if len(self.cmd_args) == 3:
            alias, username, password = self.cmd_args
        elif len(self.cmd_args) == 2:
            alias, username = self.cmd_args
            password = None
        elif len(self.cmd_args) == 1:
            alias = self.cmd_args[0]
            password = None
            username = None
        else:
            alias, username, password = [None, None, None]

        print(self.safe.write_credential(alias, username, password))

    def do_cat(self):
        ''' Executes the cat command '''
        if len(self.cmd_args) < 1:
            self.utils.die(self.command_help(self.cmd))

        for alias in self.cmd_args:
            self.utils.pretty_print(self.safe.read_credential(alias))

    def do_copy(self):
        ''' Executes the copy command '''
        if len(self.cmd_args) != 1:
            self.utils.die(self.command_help(self.cmd))

        alias = self.cmd_args[0]
        credential = self.safe.read_credential(alias)
        self.utils.copy_to_clipboard(credential['password'])

    def do_ls(self):
        ''' Executes the ls command '''
        safe = self.safe.read_safe()
        for credential in safe['data'].keys():
            print(credential)

    def do_rm(self):
        ''' Executes the rm command '''
        if len(self.cmd_args) < 1:
            self.utils.die(self.command_help(self.cmd))

        for alias in self.cmd_args:
            print(self.safe.delete_credential(alias))

    def run(self):
        ''' Runs a command '''
        self.parse_args()

        self.utils = Util()
        self.safe = Safe(self.utils)

        if self.cmd == 'add':
            self.do_add()
        elif self.cmd == 'cat':
            self.do_cat()
        elif self.cmd == 'cp':
            self.do_copy()
        elif self.cmd == 'ls':
            self.do_ls()
        elif self.cmd == 'rm':
            self.do_rm()
        else:
            self.utils.die(self.usage)

if __name__ == '__main__':
    VERSION = '0.1.1'
    USAGE = '''pick - minimal password manager

Options:
    -h, --help      Print usage
    --version       Print version information and quit

Commands:
    add     Save a credential to the safe
    cat     Print a credential to STDOUT
    cp      Copy a credential password to the clipboard
    ls      List credentials
    rm      Remove a credential
  '''

    Cli(USAGE, VERSION).run()
